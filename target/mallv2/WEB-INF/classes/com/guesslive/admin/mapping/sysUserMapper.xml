<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.guesslive.admin.dao.sysUserMapper">
	<resultMap id="BaseResultMap" type="sysUser">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="account" property="account" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="phone" property="phone" jdbcType="VARCHAR" />
		<result column="status" property="status" jdbcType="BIT" />
		<result column="createuser" property="createuser" jdbcType="INTEGER" />
		<result column="createtime" property="createtime" />
		<result column="icon" property="icon" jdbcType="VARCHAR" />
		<result column="agent_id" property="agentId" jdbcType="VARCHAR" />
		<result column="depart_id" property="departId" jdbcType="INTEGER" />
		<result column="email" property="email" jdbcType="VARCHAR" />
		<result column="roles" property="roles" jdbcType="VARCHAR" />
	</resultMap>

	<sql id="Base_Column_List">
		id,depart_id departId, account, password, name, phone, status, createuser, createtime,account_type accountType,icon,agent_id agentId,(select group_concat(r.role_name) from t_user_role ur,t_role r where ur.role_id = r.role_id and ur.user_id = s.id) roleNames,(select `name` from t_department t where t.
		id = depart_id and t.agentid = agent_id) departName
	</sql>

	<select id="getSysUserListForPage" resultMap="BaseResultMap">
		SELECT
			s.id, s.account, s.password, s.name, s.phone, s.status, s.createuser, date_format(s.createtime,'%y-%m-%d %H:%I:%S') createtime,s.account_type,s.icon,s.agent_id,s.email
			,(select group_concat(role_id separator ',') from t_user_role ur where ur.user_id = s.id ) roles,s.depart_id departId,(select name from t_department d where d.id = s.depart_id )departName
		FROM t_sys_user s,t_agent a
		<where>
			s.agent_id = a.id
			<if test="user != null">
				<if test="user.account != null and user.account != ''">
					and s.account like '%${user.account}%'
				</if>
				<if test="user.name != null and user.name != ''">
					and s.name like '%${user.name}%' 
				</if>
				<if test="user.agentName != null and user.agentName != ''">
					and a.agentname like '%${user.agentName}%' 
				</if>
				<if test="user.departId != null and user.departId != ''">
					and s.depart_id = #{user.departId} 
				</if>
				<if test="user.status != null and user.status != ''">
					and s.status = #{user.status}
				</if>
			</if>
		</where>
		ORDER BY createtime desc
		limit #{start},#{rows}
	</select>
	
	<select id="getSysUserCount" resultType="int">
		SELECT
			count(1)
		FROM t_sys_user s,t_agent a
		<where>
			s.agent_id = a.id
			<if test="account != null and account != ''">
				and s.account like '%${account} %'
			</if>
			<if test="name != null and name != ''">
				and s.name like '%${name} %'
			</if>
			<if test="agentName != null and agentName != ''">
				and a.agentname like '%${agentName}%' 
			</if>
			<if test="status != null and status != ''">
				and s.status = #{status}
			</if>
		</where>
	</select>

	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from t_sys_user
		where id = #{id,jdbcType=INTEGER}
	</select>
	
	<select id="getUserByAccount" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
			s.id,s.depart_id departId, s.account, s.password, s.name, s.phone, s.status, s.createuser, s.createtime,s.account_type accountType,s.icon,s.email,s.agent_id agentId,a.agentname,
				(select group_concat(r.role_name) from t_user_role ur,t_role r where ur.role_id = r.role_id and ur.user_id = s.id) roleNames,
					(select `name` from t_department t where t.id = depart_id and t.agentid = s.agent_id limit 0,1) departName,a.agentname agentName
						from t_sys_user s,t_agent a
		<where>
			s.agent_id = a.id
			<if test="account != null">
				and s.account = #{account}
			</if>
			<if test="status != null">
				and a.status = #{status}
			</if>
		</where> 
	</select>

	<insert id="insert" parameterType="SysUser">
		insert into t_sys_user (id, account, password,
		name, phone, status, createuser,
		createtime)
		values (#{id,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR},
		#{name,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{status,jdbcType=BIT},
		#{createuser,jdbcType=INTEGER},
		SYSDATE())
	</insert>

	<insert id="insertUserRole">
		insert t_user_role (user_id,role_id) values (#{userId},#{roleId})
	</insert>

	<delete id="deleteUserRole">
		delete from t_user_role where user_id = #{userId}
	</delete>

	<insert id="insertSelective" parameterType="SysUser" useGeneratedKeys="true" keyProperty="id">
		insert into t_sys_user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="account != null">
				account,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="phone != null">
				phone,
			</if>
			<if test="status != null">
				status,
			</if>
			<if test="accountType != null">
				account_type,
			</if>
			<if test="icon != null">
				icon,
			</if>
			<if test="agentId != null">
				agent_id,
			</if>
			<if test="email != null">
				email,
			</if>
			<if test="departId != null">
				depart_id,
			</if>
			<if test="createuser != null">
				createuser,
			</if>
				createtime
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="account != null">
				#{account,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="phone != null">
				#{phone,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				#{status},
			</if>
			<if test="accountType != null">
				#{accountType},
			</if>
			<if test="icon != null">
				#{icon},
			</if>
			<if test="agentId != null">
				#{agentId},
			</if>
			<if test="email != null">
				#{email},
			</if>
			<if test="departId != null">
				#{departId},
			</if>
			<if test="createuser != null">
				#{createuser,jdbcType=INTEGER},
			</if>
			SYSDATE()
		</trim>
	</insert>

	<update id="updateByPrimaryKeySelective" parameterType="SysUser">
		update t_sys_user
		<set>
			<if test="password != null">
				password = #{password},
			</if>
			<if test="name != null">
				name = #{name},
			</if>
			<if test="phone != null">
				phone = #{phone},
			</if>
			<if test="status != null">
				status = #{status},
			</if>
			<if test="accountType != null">
				account_type = #{accountType},
			</if>
			<if test="icon != null">
				icon = #{icon},
			</if>
			<if test="agentId != null">
				agent_id = #{agentId},
			</if>
			<if test="email != null">
				email = #{email},
			</if>
			<if test="departId != null">
				depart_id = #{departId},
			</if>
		</set>
		where account = #{account}
	</update>
	
	<update id="updateByPrimaryKey" parameterType="SysUser">
		update t_sys_user
		set account = #{account,jdbcType=VARCHAR},
		password = #{password,jdbcType=VARCHAR},
		name = #{name,jdbcType=VARCHAR},
		phone = #{phone,jdbcType=VARCHAR},
		status = #{status,jdbcType=BIT},
		createuser = #{createuser,jdbcType=INTEGER},
		createtime = #{createtime,jdbcType=TIMESTAMP}
		where id = #{id,jdbcType=INTEGER}
	</update>
	
	<update id="updatePwd" parameterType="SysUser">
	   update t_sys_user set password=#{password} where account=#{account}
	</update>
	
	<!-- 账户唯一性验证 -->
	<select id="selectByAccount"  resultType="int">
		SELECT count(1) FROM t_sys_user WHERE account=#{account}
	</select>
	
	<!-- 插入t_role-->
	<insert id="insertRole"  parameterType="Role" useGeneratedKeys="true" keyProperty="role_id" >
		INSERT into t_role(role_name,is_delete,agent_id,description,creat_time) values (#{roleName},#{isDelete},#{agentId},#{description},SYSDATE());
	</insert>
	
	<!-- 插入t_permission-->
	<insert id="insertPermission">
		insert into t_permission (menu_code,role_id) values (#{menuCode},#{roleId})
	</insert>
	
	<!-- 更新t_role-->
	<update id="updateRole">
		update t_role set description = #{description},role_name = #{roleName} where role_id = #{roleId}
	</update>
	
	<!-- 删除t_role-->
	<delete id="deletePermission">
		delete from t_permission where role_id = #{roleId}
	</delete>
	
	<!-- 查询所有角色-->
	<select id="selectRoles"  resultType="Role">
		SELECT
			role_id roleId,role_name roleName,is_delete isDelete,agent_id agentId,description
		FROM
			t_role r
		WHERE
			r.status = 0
			<if test="agentId != null and agentId != ''">
				and r.agent_id = #{agentId}
			</if>
			<if test="roleId != null and roleId != ''">
				and r.role_id = #{roleId}
			</if>	 	 
		
	</select>
	
	<!-- 查询角色下菜单权限 -->
	<select id="selectMenuByRoleId"  resultType="Menu">
		select mu.menu_id id,mu.menu_code menuCode,mu.menu_name menuName,mu.menu_url menuUrl,mu.parent_code parentCode,mu.menu_type menuType,mu.order_num orderNum
		 from t_permission p,t_menu_url mu where p.menu_code = mu.menu_code and p.role_id = #{roleId} and mu.parent_code = #{parentCode}
		order by mu.order_num
	</select>
	
	<!-- 查询所有公司 -->
	<select id="selectAgent"  resultType="Agent">
		select * from t_agent t where t.`status` =0
	</select>

	<select id="selectSignRule" resultType="SignRule">
		SELECT * FROM t_sign_rule
	</select>

	<update id="updateSignRule" parameterType="SignRule">
		update t_sign_rule
		<set>
			<if test="first != null">
				first = #{first},
			</if>
			<if test="second != null">
				second = #{second},
			</if>
			<if test="third != null">
				third = #{third},
			</if>
			<if test="fourth != null">
				fourth = #{fourth},
			</if>
			<if test="fifth != null">
				fifth = #{fifth},
			</if>
			<if test="sixth != null">
				sixth = #{sixth},
			</if>
			<if test="seventh != null">
				seventh = #{seventh},
			</if>
			<if test="obtain != null">
				obtain = #{obtain},
			</if>
			<if test="instend != null">
				instend = #{instend},
			</if>
			<if test="updatetime != null">
				updatetime = #{updatetime},
			</if>
			<if test="updaterid != null">
				updaterid = #{updaterid},
			</if>
		</set>
		where id=#{id}
	</update>
	
	<!-- 更新个人资料 -->
	<update id="updateSysUser" parameterType="SysUser">
	update t_sys_user
		<set>
			<if test="name != null">
				name = #{name},
			</if>
			<if test="phone != null">
				phone = #{phone},
			</if>
			<if test="icon != null">
				icon = #{icon},
			</if>
			<if test="email != null">
				email = #{email},
			</if>
			<if test="departId != null">
				depart_id = #{departId},
			</if>
		</set>
		where id= #{id}
	</update>
	
	<!-- 查询系统各项统计数据 -->
	<select id="selectCount"  resultType="Count">
		select 
			(select count(1) from t_goods t where t.`status` in (3,5))allGoods,
			(select count(1) from t_agent t where t.`status` in (2))allAgents,
			(select count(1) from t_brand t where t.`status` = 1)allBrands,
			(select IFNULL(SUM(t.paymoney),0) from t_order t where t.orderstatus in (1,2,3,4) and t.createtime > DATE_FORMAT(NOW(),'%Y-%m-%d'))paymoneyDay,
			(select IFNULL(SUM(t.paymoney),0) from t_order t where t.orderstatus in (1,2,3,4) and t.createtime > DATE_FORMAT(NOW(),'%Y-%m-00'))paymoneyMonth,
			(select IFNULL(SUM(t.paymoney),0) from t_order t where t.orderstatus in (1,2,3,4) and t.createtime > DATE_FORMAT(NOW(),'%Y-00-00'))paymoneyYear,
			(select IFNULL(SUM(t.paymoney),0) from t_order t where t.orderstatus in (1,2,3,4))paymoneyTotal,
			(select count(1) from t_order t where t.orderstatus in (1,2,3,4) and t.createtime > DATE_FORMAT(NOW(),'%Y-%m-%d'))orderDay,
			(select count(1) from t_order t where t.orderstatus in (1,2,3,4) and t.createtime > DATE_FORMAT(NOW(),'%Y-%m-00'))orderMonth,
			(select count(1) from t_order t where t.orderstatus in (1,2,3,4) and t.createtime > DATE_FORMAT(NOW(),'%Y-00-00'))orderYear,
			(select count(1) from t_order t where t.orderstatus in (1,2,3,4))orderTotal,
			(select count(1) from t_account t)userTotal,
			(select count(1) from t_account t where t.createtime > DATE_FORMAT(NOW(),'%Y-00-00'))userYear,
			(select count(1) from t_account t where t.createtime > DATE_FORMAT(NOW(),'%Y-%m-00'))userMonth,
			(select count(1) from t_account t where t.createtime > DATE_FORMAT(NOW(),'%Y-%m-%d'))userDay
		from dual
	</select>
	
	<select id="selectHotGoods" resultType="HotGoods">
		select a.cnt,a.goodsid,(select t.`name` from t_order_goods t where t.goodsid = a.goodsid limit 0,1)goodsname,(select t.iconurl from t_order_goods t where t.goodsid = a.goodsid limit 0,1)iconurl from (select count(1)cnt,t.goodsid from t_order_goods t where t.orderid in (select t.id from t_order t where t.orderstatus in (1,2,3,4)) GROUP BY t.goodsid)a order by a.cnt desc limit 0,10
	</select>
	
	<select id="selectOrderInterval" resultType="OrdersInterval">
		select #{start} start, #{end} end,count(1)num,count(1)/(select count(1) from t_order t where t.orderstatus in (1,2,3,4))*100 percent from t_order t where t.orderstatus in (1,2,3,4)
		 	<if test="start != null and start != ''">
				and t.paymoney >#{start}
			</if>
		 	<if test="end != null and end != ''">
				and t.paymoney &lt;=#{end}
			</if>
	</select>
	
	<select id="selectOrdersProv" resultType="OrdersProv">
		select count(1)num,t.prov from t_order t where t.orderstatus in (1,2,3,4) group by t.prov
	</select>
	
	<select id="selectHotBrand" resultType="Brand">
		select a.num,b.* from (select count(g.brandCode)num,g.brandCode from t_order_goods t LEFT JOIN t_goods g on t.goodsid = g.goodsid where t.orderid in (select T.id from t_order t where t.orderstatus in (1,2,3,4)) group by g.brandCode)a LEFT JOIN t_brand b on a.brandCode=b.brandcode where a.num >0 ORDER BY a.num desc limit 0,10
	</select>
	
</mapper>